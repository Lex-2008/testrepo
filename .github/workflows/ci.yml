on: push

jobs:

  # set-matrix:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:
  #     - name: set-matrix
  #       shell: python
  #       run: |
  #         import os
  #
  #         matrix=[{'run':'ls -la /'}]
  #
  #         matrix={'include':[]}
  #         matrix['include'].append({ 'name':'first', 'os': 'ubuntu-latest', 'filename': 'first.yml'})
  #         matrix['include'].append({ 'name':'second', 'os': 'ubuntu-latest', 'filename': 'second.yml'})
  #
  #         with open('./.github/workflows/first.yml', 'a') as output:
  #             output.write("
  #         on:
  #           workflow_call:
  #
  #         jobs:
  #           print-username:
  #             runs-on: ubuntu-latest
  #
  #             steps:
  #               - name: Print the input name to STDOUT
  #                 run: echo hello world
  #         ")
  #   
  #         with open(os.environ["GITHUB_OUTPUT"], 'a') as output:
  #             output.write(f"{matrix=}")
  #           print(f"output:\n{matrix=}")

  test:
    # NOTE: cant use expressions here
    # uses: ./.github/workflows/first.yml

    runs-on: ubuntu-latest
    steps:
      - id: id
        run: echo key=False $GITHUB_OUTPUT
      - echo ${{ steps.id.outputs.key }}
      - if: steps.id.outputs.key
        run: echo nooo
      - if: ${{ steps.id.outputs.key }}
        run: echo nooo
      - if: ${{ steps.id.outputs.key == 'True' }}
        run: echo nooo
      - if: steps.id.outputs.key == 'True'
        run: echo nooo
      - if: ${{ fromJSON(steps.id.outputs.key) }}
        run: echo nooo
      - if: fromJSON(steps.id.outputs.key)
        run: echo nooo

      # - run: |
      #     echo "$ANDROID_HOME"
      #     echo "$ANDROID_SDK_ROOT"
      #     # find "${ANDROID_HOME}" -name sdkmanager
      #     sudo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --install "ndk;25.2.9519653"


          # /usr/local/lib/android/sdk/ cmdline-tools/latest/bin/sdkmanager
          # /usr/local/lib/android/sdk/ tools/bin/sdkmanager


      # - uses: actions/checkout@v4

      # - name: patch the file
      #   shell: bash
      #   run: cp Support.cmake '/c/Program Files/CMake/share/cmake-3.27/Modules/FindPython/'

      # - name: path
      #   shell: bash
      #   run: "echo $PATH | tr : '\\n'"

      # - name: ls path
      #   shell: bash
      #   run: "echo $PATH | xargs -d: ls -la || true"

      # - name: ls /
      #   shell: bash
      #   run: "ls -la /"

      # - name: find cmake on c
      #   shell: bash
      #   run: "find /c -iname '*.cmake' 2>/dev/null"

      # - name: find cmake on d
      #   if: ${{ !cancelled() }}
      #   shell: bash
      #   run: "find /d -iname '*.cmake' 2>/dev/null"

      # - name: Archive production artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Support.cmake
      #     path: c:/Program Files/CMake/share/cmake-3.27/Modules/FindPython/Support.cmake

      # - name: default python3
      #   shell: bash
      #   run: which python3

      # - name: python3 venv
      #   shell: bash
      #   run: |
      #     python3 -m venv test-venv
      #     find test-venv
      #     test-venv/Scripts/python -c 'print(12)'

      # - name: cmake find Python3
      #   run: cmake -S . -B test

      # - name: cmake-found python3 venv bash
      #   shell: bash
      #   run: C:/hostedtoolcache/windows/Python/3.12.0/x64/python3.exe -m venv test2-venv
      #
      # - name: cmake-found python3 venv
      #   if: ${{ !cancelled() }}
      #   run: C:/hostedtoolcache/windows/Python/3.12.0/x64/python3.exe -m venv test3-venv
      #
      # - name: find test2
      #   shell: bash
      #   if: ${{ !cancelled() }}
      #   run: |
      #     find test2-venv
      #     test2-venv/Scripts/python -c 'print(12)'
      #
      # - name: find test3
      #   shell: bash
      #   if: ${{ !cancelled() }}
      #   run: |
      #     find test3-venv
      #     test3-venv/Scripts/python -c 'print(12)'
